product-service:-getting details of product

order-service:-posting details of product

multiple instance of infrastructure microservices(API Gateway,Service discovery,Load balancer)

multiple instance of business microservices(Producr service , Order service)


NOTE :- 

1.multiple instaces are generating by  using Region and Availabilty zone only

2.client request also split by using DNS(AWS 53 Route , Azure traffic manager) and share to API Gateway

3.DNS also not a single point failure because in that also different DNS available

4.API Gateway very intelligent compare to Load balancer 

5.Load balancer after traffic distribute to different instance of microservice again inform to API Gateway

6.API Gateway--->Routing capability

7.Load balancer--->only distributing capability






server.port

allow parallel run


spring.application.name--------->it used in eureka website and restcall calling time(localhost:8080 is replaced by spring.application.name)


Service Discovery


Eureka Server 

Eureka Client(Load balancing implementing at client side)


Configuration class return-type and method-name used in service class return-type as Class name and method-name as reference variable name


spring.application.name replace hostname:port in while rest calling


Setup on Gateway(api call)
Add routes in application.yml
Use lb:// in route URI
Add spring-cloud-starter-gateway
Register gateway with Eureka


Setup on Client(rest call)
Add @LoadBalanced bean
Use http://<service-name>
Include spring-cloud-starter-loadbalancer
Register with Eureka


API Gateway

1. API Gateway also one of the client in Service discovery


ID----->microservice name

URI---->base url of api

predicate---->endpoint url of api



route are used for multiple microservice that's why used array index

predicate are used for multiple api endpoints that's why used array index


note:- eureka url calling by using api gateway




Circuit breaker(name and fallbackMethod attributes)

note:- 

1.name attribute value is after the instance property name whatever user provided name passing to that attribute value

note:- name value provided by getting property after the instance provided by user defined name (for all circuit breaker,retry,timeout same )

2.circuit breaker test by using server stop and start of another application

3.testing timeout scenario need to implement logger and thread concepts in downstream microservice(because of thread concept downstream system responding very slowly)



tracing(slueth and zipkin)--------------->[microservice name,trace id, span id]
-------

1.trace id same for all the components

2.span id specific for each component




microservice to microservice communication


pod---->side car proxies(Dataplane vs control plane)

1.service discovery

2.client side load balancer

3.circuit breaker

4.retry(retry only for 500 error series)

5.telemetry cability(Oberavability capabilities)

6.authorization

7.deployment stratagies(initially Microservice A----->90% , Microservice B----->10%) 


ISTIO

1.sidecar--->Envoy
2.Configuration Manager---->Galley
3.Traffic controller---->Pilot
4.Security Manager---->Citadel





multi threading

JDK----->compiler

JVM----->executor


NOTE:- in multi threading, we are focusing on JVM only

Process :- process is nothing but program in excution(Note:- excution only done by JVM only)

Thread :- thread is nothing but sequence of instructions set in process


JVM(heap,stack,code segment,data segment,registers,program counters)



Heap,Code segment,Data segment common for all register,stacks,program counter and threads


Register ,stacks,program counters specific to thread only



1.user defined thread vs predefined thread using executor framework

2.user defined thread------------->not reuseable(more context switching,less processing time)

3.predefined thread using executor framework----------->reuseable(less context switching,more processing time)----------->can we use 2 cpu in single machine?
how intercommunication

4.completeablefuture async vs kafka async communication

imp
---

5.minimum thread number vs maximum thread number

6.minimum thread are busy then place in queue otherwise dont use queue(assume queue size 5 only)

7.if queue size also full then only enable maximum thread number for new task(note:-dont use maximum thread number for old task whatever in the queue)

8.if maximum thread number also full then only rejected the task 

note:- use maximum thread number for after queue full whatever after queue full


Daemon thread vs user thread
----------------------------

1.Daemon thread uses setter method that used to set flag then only act as Daemon thread

2.User thread not uses setter method that is called user thread

RejectedExecutionHandler
------------------------

1.new ThreadPoolExecutor.AbortPolicy(just return error)

2.new ThreadPoolExecutor.CallerRunsPolicy(when calling then rejected------------>but not at called side)

3.new ThreadPoolExecutor.DiscardPolicy(silently rejected without throwing error)

4.new ThreadPoolExecutor.DiscardOldestPolicy


life cycle of thread pool executor

1.running
2.shutdown(accepting existing pipeline in progress tasks but not new tasks)
3.stop-------->force shutdown(not accepting existing pipeline in progress tasks and also new tasks)
4.terminated

Blocking queue
--------------
1.array(static)
2.linkedlist(dynamic)




HashMap:-

1.hash

2.key

3.value

4.node

hashcode(hashcode generate based on the key )

storing in hashmap(after hashcode generate now apply on that (hashcode%size of hashmap----------->now getting inserting place of hashmap)

collision:-collision is nothing but multiple time value replacing for same key

case 1:

2 objects same then hashcode same

case 2:

2 objects hashcode same then objects are not same sometimes


note 
----

1.object noting but key

2.every where hash code with object used(both are not independent)



if(n/2







scanner sc=new Scanner(System.in);
int n=sc.nextInt();

while(n!=0){

 n=n/10;



Service we are going to build

Product service:-Create and view products,act as Catalog

Order service:- can order products

Inventory service:-can check if product is in stock or not

Notification service:-can send notifications,after order is placed

Order service ,inventory service,Notification service are going to interact with each other



MONGO DB COMPASS
----------------

installation
------------

Run service as Network Service user

path
----

C:\Program Files\MongoDB\Server\8.0\bin


Create folder
-------------

C:/data/db/ 


command prompt
--------------

mongod

Mongo db compass UI
-------------------

refresh


ORACLE DB
---------

sqlplus/nolog


conn /as sysdba

ALTER USER system IDENTIFIED BY system;


NOTE:- Oracle database and Oracle SQL developer same username and password







docker and kubernates

front end(service-nodeport)--->backend(service-nodeport)--->database(service-nodeport)



USERNAME ans PASSWORD of DATABASE(secret files)

URL(hostname and database name) of DATABASE(config map file)


NOTE:- do we need to create root and database password for all

NOTE:-Additionally Persistent Volume and Persistent Volume Claim for Database

env key used to map properties for database(In Deployment File)
---------------------------------------------------------------

1.secretKeyRef(Username and Password)

2.configMapKeyRef(URL---->hostname and database name)



Microservice(in microservice DEPLOYMENT also provide ENV properties of DATABASE)

Database(in database DEPLOYMENT also provide ENV properties of DATABASE)



BACKEND MICROSERVICE
--------------------

deployment->service

BACKEND DATABASE
----------------

secrets->config map->persistent volume claims->deployment->service


FRONTEND
--------

deployment->service





nodeport->load balancer->cluster ip(check port ,targer port,protocol different for 3 types)



load balancer(AWS,GKS)


external acccess
----------------

nodeport(first)

port(second)

targetPort(third)



1.nodeport(dev/test)--------->external access

2.load balancer---------->external access

3.cluster ip(production)----------->don't have direct external access(we provide access by using Ingress controller | also called as path based routing)


ALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql';






SELECT * FROM T_ORDER_LINE_ITEMS

SELECT * FROM T_ORDERS

SELECT * FROM T_ORDERS_ORDER_LINE_ITEMS_LIST

SELECT * FROM T_INVENTORY


Classes
-------

Dto,Entity(@AllArgsConstructor,@NoArgsConstructor,@Data)

Controller,Service(@RequiredArgsConstructor)

@Data == @Getter + @Setter + @ToString + @EqualsAndHashCode + @RequiredArgsConstructor

@AllArgsConstructor(For all)

@RequiredArgsConstructor(Specific final and nonNull)

@NoArgsConstructor(NONE)

postman hitting
---------------

by using Dto fields reference variable passing in postman

NOTE:- parent and child class not using class names but using there references of fields

Integration Tests
-----------------

1.Testcontainers fetching url from docker that's why using MongoDBContainer

2.while calling content() used to send data but that is accepting only string data.so,converting json to string format by using object mapper

SPRING BOOT PROJECT CONVENTION
------------------------------

1.Artifact name and Project name Hyphan used(Note:- Hyphans not reflected in package name,so use hyphans in Artifact name and Project name)


@PostConstruct vs @Bean CommandLineRunner
-----------------------------------------

@PostConstruct
--------------

1.Run logic after dependency injection(initialization logic)

2.Initializing resources, validating beans, calling setup methods

3.No access to command-line args

@Bean CommandLineRunner
-----------------------

1.Run logic after Spring Boot starts (application logic)

2.Bootstrapping data, triggering jobs, test inserts

3.Has access to String[] args


















